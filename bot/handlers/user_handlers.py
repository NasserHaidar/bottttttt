#imports
import io
import os
import asyncio
import aiogram

from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, FSInputFile, InputMediaPhoto, InputFile
from aiogram.filters import StateFilter, Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from dotenv import find_dotenv, load_dotenv
load_dotenv(find_dotenv())
from pyexpat.errors import messages
from datetime import datetime

import database

from icecream import ic
from sqlalchemy.ext.asyncio import AsyncSession

from ..keyboards import inline_keyboards
from ..states.user_states import UserStates
from ..filters import chat_type
from ai import AI_Requests
from YooKassa import YooKassaPayment

#create new Router for handling user messages
user_router = aiogram.Router()
user_router.message.filter(chat_type.ChatTypeFilter(["private"]))

AI_requests = AI_Requests(api_key = os.getenv("api_key"))
Yokassa = YooKassaPayment(account_id = os.getenv("test_shop_id"), secret_key = os.getenv("test_secret_key"))

balance_values = {"1": 20.0, "10": 180.0, "25": 400.0, "50": 800.0, "100": 1650.0, "200": 3500.0}
styles = {"–ó–∏–º–∞": '1935cca8-72aa-4358-93f4-5fbedb9ddc6f'}
#------------------------------------------------MAIN MENU-------------------------------------------------------
@user_router.message(StateFilter("*"), CommandStart())
async def menu_handle_start_command(message: Message, state: FSMContext, session: AsyncSession):
    if not await database.orm_get_user(session, message.from_user.id):
        data = {
            "id": message.from_user.id,
            "name": message.from_user.username,
            "status_sub": None,
            "balance": 1,
            "image": None,
            "date": datetime.strptime(datetime.now().strftime("%d.%m.%y"), "%d.%m.%y")
        }
        await database.orm_add_user(session, data)

    await state.update_data(prompt = "")
    await state.clear()

    await state.set_state(UserStates.main_menu)
    await message.answer_photo(photo = FSInputFile("assets\\empty_image.png"))

    await message.answer(text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
                         reply_markup = inline_keyboards.main_menu)

@user_router.callback_query(F.data == "back_to_main_menu")
async def menu_handle_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    await state.set_state(UserStates.main_menu)

    await call.message.answer(text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
                              reply_markup = inline_keyboards.main_menu)

#------------------------------------------------GENERATING-------------------------------------------------------
@user_router.callback_query(F.data == "generate")
async def set_propmt(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    await state.set_state(UserStates.prompt)

    await call.message.answer(text = "(1/2) –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏—Ü–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –≥–¥–µ –æ–Ω–∏, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç?\n–ù–∞–ø—Ä–∏–º–µ—Ä:–ú—É–∂—á–∏–Ω–∞ –≤ –ø–∞–ª—å—Ç–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ, –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ —Å–Ω–µ–≥, —Å–Ω–µ–∂–∏–Ω–∫–∏, –∑–∏–º–Ω–∏–π –ª–µ—Å", 
                              reply_markup = inline_keyboards.back_to_main_menu)

@user_router.message(StateFilter(UserStates.prompt), F.text)
#@user_router.callback_query(F.data == "generate")
async def set_image(message: Message, state: FSMContext, session: AsyncSession):
    #await message.delete()
    await state.update_data(prompt = str(message.text))    
    await state.set_state(UserStates.generate_menu)

    await message.answer(text = "(2/2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ", 
                              reply_markup = inline_keyboards.back_to_main_menu)

#Format
@user_router.callback_query(StateFilter(UserStates.generate_menu), F.data == "format")
async def generate_menu_format(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    await state.set_state(UserStates.format)
    await call.message.answer(text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–æ–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup = inline_keyboards.generate_menu_format)

@user_router.callback_query(StateFilter(UserStates.format), F.data.startswith("generate_menu_format"))
async def generate_menu_format_apply(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()

    image_format = (call.data).split("_")[3]
    await state.update_data(format = image_format)
    await state.set_state(UserStates.generate_menu)

    await call.message.answer(text = "–§–æ—Ä–º–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup = inline_keyboards.back_to_generate_menu)

#Prompt
@user_router.callback_query(StateFilter(UserStates.generate_menu), F.data == "prompt")
async def change_prompt(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    await state.set_state(UserStates.prompt)

    await call.message.answer(text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏—Ü–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –≥–¥–µ –æ–Ω–∏, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç?",
                              reply_markup = inline_keyboards.back_to_generate_menu)

@user_router.message(StateFilter(UserStates.prompt), F.text)
async def generate_menu_prompt(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(prompt = str(message.text))
    await state.set_state(UserStates.generate_menu)
    await message.answer(text = "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup = inline_keyboards.back_to_generate_menu)

#Styles
@user_router.callback_query(StateFilter(UserStates.generate_menu), F.data == "style")
async def change_style(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    styles_kb = InlineKeyboardBuilder()
    await state.set_state(UserStates.style)
    for i in styles.keys():
        styles_kb.add(aiogram.types.InlineKeyboardButton(text = i, callback_data = f"style_{i}"))

    await call.message.answer(text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å", reply_markup = styles_kb.as_markup())

@user_router.callback_query(StateFilter(UserStates.style), F.data.startswith("style_"))
async def change_style_apply(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    style = (call.data).split("_")[1]
    await state.update_data(style = style)
    await state.set_state(UserStates.generate_menu)

    await call.message.answer(text = "–°—Ç–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup = inline_keyboards.back_to_generate_menu)

#GENERATION MENU
@user_router.message(StateFilter(UserStates.generate_menu), F.photo)
async def generate_menu(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    if message.photo:
        photo_file_id = message.photo[-1].file_id
        file = await message.bot.get_file(photo_file_id)
        image: io.BytesIO = await message.bot.download_file(file.file_path)
        image = image.getvalue()
        uploaded_image_id = AI_requests.upload_image(image)
        ic(uploaded_image_id)
        await state.update_data(generate_menu = {"user_image_id": uploaded_image_id, "reference_image_id": ""})

    if data.get("prompt"):
        prompt = data["prompt"]
    else:
        prompt = "n"

    if data.get("format"):
        format = data["format"]
    else:
        format = "1:1"

    if data.get("style"):
        style = data["style"]
    else:
        style = "–ó–∏–º–∞"
    await message.answer(text = f"–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n\n‚úçÔ∏è–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç - {prompt}\n\nüìê–§–æ—Ä–º–∞—Ç - {format}\n\nüé®–°—Ç–∏–ª—å - {style}", 
                         reply_markup = inline_keyboards.generate_menu)

@user_router.callback_query(StateFilter(UserStates.generate_menu), F.data == "back_to_generate_menu")
async def back_to_generate_menu(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    await generate_menu(call.message, state, session)

#GENERATE
async def generate(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.delete()
    data = await state.get_data()
    user_data = await database.orm_get_user(session, call.from_user.id)
    current_user_balance = float(user_data.balance)

    if data.get("prompt"):
        prompt = data["prompt"]
    else:
        prompt = "n"

    if data.get("format"):
        format = data["format"]
    else:
        format = "1:1"

    if data.get("style"):
        style = styles[data["style"]]
    else:
        style = "1935cca8-72aa-4358-93f4-5fbedb9ddc6f"
    try:
        if current_user_balance - 1 >= 0:
            current_user_balance -= 1
            await database.orm_update_user_balance(session = session, user_id = call.message.chat.id, balance = current_user_balance)

            waiting_message = await call.message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            data = await state.get_data()
            images_data = await asyncio.to_thread(AI_requests.generate_image, 
                                                  prompt, 
                                                  style, 
                                                  data["generate_menu"]["user_image_id"],
                                                  format)

            media = []
            for image in images_data:
                media.append(InputMediaPhoto(media = BufferedInputFile(image, f"generated_image_{call.message.chat.id}")))

            await waiting_message.delete()

            await call.message.answer_media_group(media = media)
            await call.message.answer(text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup = inline_keyboards.after_generate_menu)
        else:
            await call.message.answer(text = "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö", reply_markup = inline_keyboards.back_to_main_menu)
    except Exception as e:
        await call.message.answer(text = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –ø–ª–æ—â–∞–¥–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        ic(e)

@user_router.callback_query(StateFilter(UserStates.generate_menu), F.data == "generate_image")
async def generate_handle_state(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await generate(call, state, session)

@user_router.callback_query(F.data == "generate_another_one")
async def generate_handle_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await generate(call, state, session)

#-------------------------------------------------PROFILE---------------------------------------------------------
#PROFILE MENU
@user_router.callback_query(F.data == "profile")
async def profile_menu(call: CallbackQuery, state: FSMContext , session: AsyncSession):
    """Profile menu"""
    await call.message.delete()
    await state.set_state(UserStates.profile_menu)
    user_data = await database.orm_get_user(session, call.from_user.id)

    await call.message.answer(text = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.name}:\nID: {user_data.id}",
                              reply_markup = inline_keyboards.profile_menu)

#BALANCE
@user_router.callback_query(StateFilter(UserStates.profile_menu, UserStates.top_up_balance), F.data == "balance")
async def balance_menu(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Balance menu"""
    await state.set_state(UserStates.balance_menu)
    user_data = await database.orm_get_user(session, call.from_user.id)

    await call.message.edit_text(text = f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data.balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", reply_markup = inline_keyboards.balance_menu)

@user_router.callback_query(StateFilter(UserStates.balance_menu), F.data == "top_up_balance")
async def send_top_up_balance(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Send needly balance to top up"""
    await call.message.delete()
    await state.set_state(UserStates.top_up_balance)

    await call.message.answer(text = "–í—ã–±–∏—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–æ–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è +-20 —Ä—É–±–ª–µ–π)",
                              reply_markup = inline_keyboards.chose_balance_menu)

@user_router.callback_query(StateFilter(UserStates.top_up_balance), F.data.startswith("balance_"))
async def top_up_balance(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Top up the balance, yookassa api"""
    value = call.data.split("_")[1]
    user_data = await database.orm_get_user(session, call.from_user.id)
    await call.message.delete()
    try:
        payment = Yokassa.create_payment(
                            amount = balance_values[value],
                            currency = "RUB", 
                            description = f"Order_{call.message.from_user.id}_{datetime.now().strftime('%d.%m.%y')}", 
                            return_url = "https://t.me/Peek_ab0o0_bot"
                        )
        payment_id = payment.id
        await state.update_data(top_up_balance = payment_id)
        payment_url_message = await call.message.answer(text = f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment.confirmation.confirmation_url}", reply_markup = inline_keyboards.back_to_balance_menu)
        while True:
            await asyncio.sleep(1)
            if Yokassa.find_payment(payment_id).status == "succeeded":
                await payment_url_message.delete()
                await database.orm_update_user_balance(session, call.from_user.id, float(user_data.balance) + float(value))
                await call.message.answer(text = f"–ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {value}", reply_markup = inline_keyboards.back_to_balance_menu)
                break

    except Exception as e:
        await call.message.answer(text = f"–û—à–∏–±–∫–∞: {e}")

"""@user_router.callback_query(StateFilter(UserStates.top_up_balance), F.data == "cancel_payment")
async def cancel_payment(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    payment_id = data["top_up_balance"]
    ic(payment_id)
    #Yokassa.cancel_payment(payment_id = payment_id)
    #await balance_menu(message, state, session)"""